name: CI

on:
  pull_request:
  push: # required for actions/cache to work
    branches:
      - master

jobs:
  ci:
    strategy:
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]

    runs-on: ${{ matrix.os }}

    env:
      RUSTFLAGS: --deny warnings

    steps:
      - uses: actions/checkout@v2
      - name: Cache
        id: rust-cache
        uses: actions/cache@v3
        with:
            path: |
                ~/.cargo/bin/
                ~/.cargo/registry/index/
                ~/.cargo/registry/cache/
                ~/.cargo/git/db/
                target/
            key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml', '.github/workflows/*.yml') }}

      - name: Check for forbidden words
        run: "! grep --include='*.rs' -RE 'to_be_bytes|from_be_bytes|dbg!' ."
        if: runner.os != 'Windows'

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.66
          components: rustfmt, clippy
          default: true

      - name: Install cargo-deny
        if: steps.rust-cache.outputs.cache-hit != 'true'
        run: rustup run --install 1.74 cargo install --force --version 0.14.17 cargo-deny --locked

      - name: Install cargo-fuzz
        if: steps.rust-cache.outputs.cache-hit != 'true'
        run: cargo install --force --version 0.11.0 cargo-fuzz --locked

      - name: Install just
        if: steps.rust-cache.outputs.cache-hit != 'true'
        run: cargo install --force --version 1.8.0 just --locked

      - name: Compile
        run: cargo build --all-targets --all-features

      - name: Fuzzer
        run: just fuzz_ci
        if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'macos')

      - name: Run tests
        run: just build test

      - name: Clippy
        run: cargo clippy --all --all-targets -- -Dwarnings

      - name: Format
        run: cargo fmt --all -- --check

      - name: Run CPython wrapper tests
        if: runner.os != 'Windows'
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip3 install --upgrade pip
          pip3 install maturin
          just test_py

      - name: Run CPython wrapper tests
        if: runner.os == 'Windows'
        run: |
          python3 -m venv venv
          venv\Scripts\activate
          pip3 install --upgrade pip
          pip3 install maturin
          just test_py

# Re-enable when this works on stable
#      - name: Run WASI tests
#        if: startsWith(matrix.os, 'macos')
#        run: |
#          rustup toolchain install nightly
#          rustup target add wasm32-wasi
#          brew install wasmtime
#          cargo install --force --version 0.1.27 cargo-wasi --locked
#          just test_wasi
